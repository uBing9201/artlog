# Docker Compose 파일 포맷의 버전을 지정합니다.
#version: '3.8'

services:
  config-service: # Spring Cloud Config 서버. 설정파일을 외부에서 관리.
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/config-service:latest
    container_name: config-service
    networks:
      - msa-network
    ports:
      - "8888:8888"
    healthcheck: # 서비스 헬스 체크 설정
      test: [ "CMD", "curl", "-f", "http://api-service:8888/actuator/health" ]
      interval: 15s # 15초마다 한번씩 체크
      timeout: 5s # 5초 안에 완료되어야 한다.
      retries: 3 # 3번까지 재시도 하기
      start_period: 30s # 컨테이너 시작 후 30초 동안은 health check 실패를 무시.
    restart: always # 컨테이너가 모종의 이유로 중지되면 무조건 재시작 시도.

  discovery-service: # Eureka Discovery 서버. 각 마이크로서비스의 위치를 등록하고 찾는 역할.
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/discovery-service:latest
    container_name: discovery-service
    networks:
      - msa-network
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://discovery-service:8761" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: always

  gateway-service: # Spring Cloud Gateway. 외부 요청의 진입점이며 라우팅 담당.
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/gateway-service:latest
    container_name: gateway-service
    networks:
      - msa-network
    ports:
      - "8000:8000"
    depends_on: # 아래 서비스들이 헬시해야 시작됨
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  api-service: # API 서비스 (외부 API 정제용)
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/api-service:latest
    container_name: api-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  user-service: # 사용자 관련 마이크로서비스 (회원가입, 로그인 등)
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:latest
    container_name: user-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  order-service: # 주문 처리 관련 마이크로서비스
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/order-service:latest
    container_name: order-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  review-service: # 리뷰 관련 마이크로서비스
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/review-service:latest
    container_name: review-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  coupon-service: # 쿠폰 및 할인 관련 마이크로서비스
    image: 390844784325.dkr.ecr.ap-northeast-2.amazonaws.com/coupon-service:latest
    container_name: coupon-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

# 서비스들이 연결될 Docker 네트워크를 정의할 수 있습니다.
# 동일한 호스트 내에서 서로 통신할 수 있도록 해 주는 Docker의 네트워크 드라이버.
networks:
  msa-network:
    driver: bridge

volumes:
  db-data: # mysql 컨테이너가 사용하는 db-data 볼륨을 docker-compose도 기억해 줌.
